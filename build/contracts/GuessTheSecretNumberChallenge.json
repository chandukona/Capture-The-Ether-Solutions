{
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "n",
          "type": "uint8"
        }
      ],
      "name": "guess",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isComplete",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "constructor"
    }
  ],
  "allSourcePaths": {
    "4": "contracts/Guess-the-secret-number.sol"
  },
  "ast": {
    "absolutePath": "contracts/Guess-the-secret-number.sol",
    "exportedSymbols": {
      "GuessTheSecretNumberChallenge": [
        196
      ]
    },
    "id": 197,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 140,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".21"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:4"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 196,
        "linearizedBaseContracts": [
          196
        ],
        "name": "GuessTheSecretNumberChallenge",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 143,
            "name": "answerHash",
            "nodeType": "VariableDeclaration",
            "scope": 196,
            "src": "71:95:4",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 141,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "71:7:4",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "307864623831623464353835393566626262623539326433363631613334636463613134643761623337393434313430306362666131623738626334343763333635",
              "id": 142,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "100:66:4",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_99285685181971047393239875460991313482430328057444046082564766036554815095653_by_1",
                "typeString": "int_const 9928...(69 digits omitted)...5653"
              },
              "value": "0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365"
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 153,
              "nodeType": "Block",
              "src": "229:46:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 150,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 147,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 211,
                            "src": "247:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 148,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "247:9:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 149,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "260:7:4",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          },
                          "value": "1"
                        },
                        "src": "247:20:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 146,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        214,
                        215
                      ],
                      "referencedDeclaration": 214,
                      "src": "239:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 151,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "239:29:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 152,
                  "nodeType": "ExpressionStatement",
                  "src": "239:29:4"
                }
              ]
            },
            "documentation": null,
            "id": 154,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "GuessTheSecretNumberChallenge",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 144,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "211:2:4"
            },
            "payable": true,
            "returnParameters": {
              "id": 145,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "229:0:4"
            },
            "scope": 196,
            "src": "173:102:4",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 166,
              "nodeType": "Block",
              "src": "330:50:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 160,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 234,
                            "src": "355:4:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_GuessTheSecretNumberChallenge_$196",
                              "typeString": "contract GuessTheSecretNumberChallenge"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_GuessTheSecretNumberChallenge_$196",
                              "typeString": "contract GuessTheSecretNumberChallenge"
                            }
                          ],
                          "id": 159,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "347:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 161,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "347:13:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 162,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "347:21:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 163,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "372:1:4",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "347:26:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 158,
                  "id": 165,
                  "nodeType": "Return",
                  "src": "340:33:4"
                }
              ]
            },
            "documentation": null,
            "id": 167,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "isComplete",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 155,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "300:2:4"
            },
            "payable": false,
            "returnParameters": {
              "id": 158,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 157,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 167,
                  "src": "324:4:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 156,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "324:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "323:6:4"
            },
            "scope": 196,
            "src": "281:99:4",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 194,
              "nodeType": "Block",
              "src": "425:141:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 176,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 173,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 211,
                            "src": "443:3:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 174,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "443:9:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 175,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "456:7:4",
                          "subdenomination": "ether",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          },
                          "value": "1"
                        },
                        "src": "443:20:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 172,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        214,
                        215
                      ],
                      "referencedDeclaration": 214,
                      "src": "435:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 177,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "435:29:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 178,
                  "nodeType": "ExpressionStatement",
                  "src": "435:29:4"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "id": 183,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 180,
                          "name": "n",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 169,
                          "src": "489:1:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        ],
                        "id": 179,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 205,
                        "src": "479:9:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                          "typeString": "function () pure returns (bytes32)"
                        }
                      },
                      "id": 181,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "479:12:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "argumentTypes": null,
                      "id": 182,
                      "name": "answerHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 143,
                      "src": "495:10:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "479:26:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 193,
                  "nodeType": "IfStatement",
                  "src": "475:85:4",
                  "trueBody": {
                    "id": 192,
                    "nodeType": "Block",
                    "src": "507:53:4",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "32",
                              "id": 189,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "541:7:4",
                              "subdenomination": "ether",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_2000000000000000000_by_1",
                                "typeString": "int_const 2000000000000000000"
                              },
                              "value": "2"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_2000000000000000000_by_1",
                                "typeString": "int_const 2000000000000000000"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 184,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 211,
                                "src": "521:3:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 187,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "521:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 188,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "transfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "521:19:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 190,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "521:28:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 191,
                        "nodeType": "ExpressionStatement",
                        "src": "521:28:4"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": null,
            "id": 195,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "guess",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 170,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 169,
                  "name": "n",
                  "nodeType": "VariableDeclaration",
                  "scope": 195,
                  "src": "401:7:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 168,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "401:5:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "400:9:4"
            },
            "payable": true,
            "returnParameters": {
              "id": 171,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "425:0:4"
            },
            "scope": 196,
            "src": "386:180:4",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 197,
        "src": "26:542:4"
      }
    ],
    "src": "0:569:4"
  },
  "bytecode": "60806040527fdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365600055670de0b6b3a7640000341461003c57600080fd5b6101448061004b6000396000f30060806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634ba4c16b8114610050578063b2fa1c9e14610060575b600080fd5b61005e60ff60043516610089565b005b34801561006c57600080fd5b50610075610112565b604080519115158252519081900360200190f35b670de0b6b3a7640000341461009d57600080fd5b600054604080517f010000000000000000000000000000000000000000000000000000000000000060ff85160281529051908190036001019020141561010f576040513390600090671bc16d674ec800009082818181858883f1935050505015801561010d573d6000803e3d6000fd5b505b50565b303115905600a165627a7a723058208d10ea415b2a706a4ffc8a32e0476e5ce75ad9867f8e95bc07f56a55b6baf6370029",
  "bytecodeSha1": "34c91cd675b30a450fa91e73a45e30db999404f9",
  "compiler": {
    "evm_version": "byzantium",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.4.26+commit.4563c3fc"
  },
  "contractName": "GuessTheSecretNumberChallenge",
  "coverageMap": {
    "branches": {
      "4": {
        "GuessTheSecretNumberChallenge.guess": {
          "3": [
            443,
            463,
            true
          ],
          "4": [
            479,
            505,
            false
          ]
        }
      }
    },
    "statements": {
      "4": {
        "GuessTheSecretNumberChallenge.guess": {
          "0": [
            435,
            464
          ],
          "1": [
            521,
            549
          ]
        },
        "GuessTheSecretNumberChallenge.isComplete": {
          "2": [
            340,
            373
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "60806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634ba4c16b8114610050578063b2fa1c9e14610060575b600080fd5b61005e60ff60043516610089565b005b34801561006c57600080fd5b50610075610112565b604080519115158252519081900360200190f35b670de0b6b3a7640000341461009d57600080fd5b600054604080517f010000000000000000000000000000000000000000000000000000000000000060ff85160281529051908190036001019020141561010f576040513390600090671bc16d674ec800009082818181858883f1935050505015801561010d573d6000803e3d6000fd5b505b50565b303115905600a165627a7a723058208d10ea415b2a706a4ffc8a32e0476e5ce75ad9867f8e95bc07f56a55b6baf6370029",
  "deployedSourceMap": "26:542:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;386:180;;;;;;;;;;281:99;;8:9:-1;5:2;;;30:1;27;20:12;5:2;281:99:4;;;;;;;;;;;;;;;;;;;;;;386:180;456:7;443:9;:20;435:29;;;;;;495:10;;479:12;;;;;;;;;;;;;;;;;;;;:26;475:85;;;521:28;;:10;;:28;;541:7;;521:28;;;;541:7;521:10;:28;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;521:28:4;475:85;386:180;:::o;281:99::-;355:4;347:21;:26;281:99;:::o",
  "language": "Solidity",
  "natspec": {
    "methods": {}
  },
  "offset": [
    26,
    568
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4B JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x4BA4C16B DUP2 EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xB2FA1C9E EQ PUSH2 0x60 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5E PUSH1 0xFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0x89 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x75 PUSH2 0x112 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH8 0xDE0B6B3A7640000 CALLVALUE EQ PUSH2 0x9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 PUSH1 0xFF DUP6 AND MUL DUP2 MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x1 ADD SWAP1 KECCAK256 EQ ISZERO PUSH2 0x10F JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 PUSH1 0x0 SWAP1 PUSH8 0x1BC16D674EC80000 SWAP1 DUP3 DUP2 DUP2 DUP2 DUP6 DUP9 DUP4 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x10D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP JUMP JUMPDEST ADDRESS BALANCE ISZERO SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 DUP14 LT 0xea COINBASE JUMPDEST 0x2a PUSH17 0x6A4FFC8A32E0476E5CE75AD9867F8E95BC SMOD 0xf5 PUSH11 0x55B6BAF637002900000000 ",
  "pcMap": {
    "0": {
      "offset": [
        26,
        568
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "5": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "CALLDATASIZE",
      "path": "4"
    },
    "8": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "LT",
      "path": "4"
    },
    "9": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x4B"
    },
    "12": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "13": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xFFFFFFFF"
    },
    "18": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "PUSH29",
      "path": "4",
      "value": "0x100000000000000000000000000000000000000000000000000000000"
    },
    "48": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "50": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "CALLDATALOAD",
      "path": "4"
    },
    "51": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "DIV",
      "path": "4"
    },
    "52": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "AND",
      "path": "4"
    },
    "53": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0x4BA4C16B"
    },
    "58": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "DUP2",
      "path": "4"
    },
    "59": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "EQ",
      "path": "4"
    },
    "60": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x50"
    },
    "63": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "64": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "DUP1",
      "path": "4"
    },
    "65": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "PUSH4",
      "path": "4",
      "value": "0xB2FA1C9E"
    },
    "70": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "EQ",
      "path": "4"
    },
    "71": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x60"
    },
    "74": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "75": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "76": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "78": {
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "DUP1",
      "path": "4"
    },
    "79": {
      "first_revert": true,
      "fn": null,
      "offset": [
        26,
        568
      ],
      "op": "REVERT",
      "path": "4"
    },
    "80": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "81": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x5E"
    },
    "84": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xFF"
    },
    "86": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x4"
    },
    "88": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "CALLDATALOAD",
      "path": "4"
    },
    "89": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "AND",
      "path": "4"
    },
    "90": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x89"
    },
    "93": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "JUMP",
      "path": "4"
    },
    "94": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "95": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "STOP",
      "path": "4"
    },
    "96": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "97": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "CALLVALUE",
      "path": "4"
    },
    "98": {
      "op": "DUP1"
    },
    "99": {
      "op": "ISZERO"
    },
    "100": {
      "op": "PUSH2",
      "value": "0x6C"
    },
    "103": {
      "op": "JUMPI"
    },
    "104": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "106": {
      "op": "DUP1"
    },
    "107": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "REVERT",
      "path": "4"
    },
    "108": {
      "op": "JUMPDEST"
    },
    "109": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "POP",
      "path": "4"
    },
    "110": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x75"
    },
    "113": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x112"
    },
    "116": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "JUMP",
      "path": "4"
    },
    "117": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "118": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "120": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "DUP1",
      "path": "4"
    },
    "121": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "122": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "SWAP2",
      "path": "4"
    },
    "123": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "124": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "125": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "DUP3",
      "path": "4"
    },
    "126": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "127": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "128": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "129": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "DUP2",
      "path": "4"
    },
    "130": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "131": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "SUB",
      "path": "4"
    },
    "132": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x20"
    },
    "134": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "ADD",
      "path": "4"
    },
    "135": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "136": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "RETURN",
      "path": "4"
    },
    "137": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "138": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        456,
        463
      ],
      "op": "PUSH8",
      "path": "4",
      "statement": 0,
      "value": "0xDE0B6B3A7640000"
    },
    "147": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        443,
        452
      ],
      "op": "CALLVALUE",
      "path": "4"
    },
    "148": {
      "branch": 3,
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        443,
        463
      ],
      "op": "EQ",
      "path": "4"
    },
    "149": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        435,
        464
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x9D"
    },
    "152": {
      "branch": 3,
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        435,
        464
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "153": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        435,
        464
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "155": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        435,
        464
      ],
      "op": "DUP1",
      "path": "4"
    },
    "156": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        435,
        464
      ],
      "op": "REVERT",
      "path": "4"
    },
    "157": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        435,
        464
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "158": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        495,
        505
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "160": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        495,
        505
      ],
      "op": "SLOAD",
      "path": "4"
    },
    "161": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x40"
    },
    "163": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "DUP1",
      "path": "4"
    },
    "164": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "165": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "PUSH32",
      "path": "4",
      "value": "0x100000000000000000000000000000000000000000000000000000000000000"
    },
    "198": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0xFF"
    },
    "200": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "DUP6",
      "path": "4"
    },
    "201": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "AND",
      "path": "4"
    },
    "202": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "MUL",
      "path": "4"
    },
    "203": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "DUP2",
      "path": "4"
    },
    "204": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "MSTORE",
      "path": "4"
    },
    "205": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "206": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "207": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "208": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "DUP2",
      "path": "4"
    },
    "209": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "210": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "SUB",
      "path": "4"
    },
    "211": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x1"
    },
    "213": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "ADD",
      "path": "4"
    },
    "214": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "215": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        491
      ],
      "op": "KECCAK256",
      "path": "4"
    },
    "216": {
      "branch": 4,
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        479,
        505
      ],
      "op": "EQ",
      "path": "4"
    },
    "217": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        475,
        560
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "218": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        475,
        560
      ],
      "op": "PUSH2",
      "path": "4",
      "value": "0x10F"
    },
    "221": {
      "branch": 4,
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        475,
        560
      ],
      "op": "JUMPI",
      "path": "4"
    },
    "222": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "PUSH1",
      "path": "4",
      "statement": 1,
      "value": "0x40"
    },
    "224": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "MLOAD",
      "path": "4"
    },
    "225": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        531
      ],
      "op": "CALLER",
      "path": "4"
    },
    "226": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        531
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "227": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "PUSH1",
      "path": "4",
      "value": "0x0"
    },
    "229": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "230": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        541,
        548
      ],
      "op": "PUSH8",
      "path": "4",
      "value": "0x1BC16D674EC80000"
    },
    "239": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        541,
        548
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "240": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "DUP3",
      "path": "4"
    },
    "241": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "DUP2",
      "path": "4"
    },
    "242": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "DUP2",
      "path": "4"
    },
    "243": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "DUP2",
      "path": "4"
    },
    "244": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        541,
        548
      ],
      "op": "DUP6",
      "path": "4"
    },
    "245": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        531
      ],
      "op": "DUP9",
      "path": "4"
    },
    "246": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "DUP4",
      "path": "4"
    },
    "247": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "CALL",
      "path": "4"
    },
    "248": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "SWAP4",
      "path": "4"
    },
    "249": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "POP",
      "path": "4"
    },
    "250": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "POP",
      "path": "4"
    },
    "251": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "POP",
      "path": "4"
    },
    "252": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "POP",
      "path": "4"
    },
    "253": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "254": {
      "op": "DUP1"
    },
    "255": {
      "op": "ISZERO"
    },
    "256": {
      "op": "PUSH2",
      "value": "0x10D"
    },
    "259": {
      "op": "JUMPI"
    },
    "260": {
      "op": "RETURNDATASIZE"
    },
    "261": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "263": {
      "op": "DUP1"
    },
    "264": {
      "op": "RETURNDATACOPY"
    },
    "265": {
      "op": "RETURNDATASIZE"
    },
    "266": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "268": {
      "op": "REVERT"
    },
    "269": {
      "op": "JUMPDEST"
    },
    "270": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        521,
        549
      ],
      "op": "POP",
      "path": "4"
    },
    "271": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        475,
        560
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "272": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "offset": [
        386,
        566
      ],
      "op": "POP",
      "path": "4"
    },
    "273": {
      "fn": "GuessTheSecretNumberChallenge.guess",
      "jump": "o",
      "offset": [
        386,
        566
      ],
      "op": "JUMP",
      "path": "4"
    },
    "274": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "JUMPDEST",
      "path": "4"
    },
    "275": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        355,
        359
      ],
      "op": "ADDRESS",
      "path": "4",
      "statement": 2
    },
    "276": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        347,
        368
      ],
      "op": "BALANCE",
      "path": "4"
    },
    "277": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        347,
        373
      ],
      "op": "ISZERO",
      "path": "4"
    },
    "278": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "offset": [
        281,
        380
      ],
      "op": "SWAP1",
      "path": "4"
    },
    "279": {
      "fn": "GuessTheSecretNumberChallenge.isComplete",
      "jump": "o",
      "offset": [
        281,
        380
      ],
      "op": "JUMP",
      "path": "4"
    }
  },
  "sha1": "54c80320f5ce0bb32cb6960c73ac6d7145891654",
  "source": "pragma solidity ^0.4.21;\n\ncontract GuessTheSecretNumberChallenge {\n    bytes32 answerHash =\n        0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365;\n\n    function GuessTheSecretNumberChallenge() public payable {\n        require(msg.value == 1 ether);\n    }\n\n    function isComplete() public view returns (bool) {\n        return address(this).balance == 0;\n    }\n\n    function guess(uint8 n) public payable {\n        require(msg.value == 1 ether);\n\n        if (keccak256(n) == answerHash) {\n            msg.sender.transfer(2 ether);\n        }\n    }\n}\n",
  "sourceMap": "26:542:4:-;;;100:66;71:95;;260:7;247:9;:20;239:29;;;;;;26:542;;;;;;",
  "sourcePath": "contracts/Guess-the-secret-number.sol",
  "type": "contract"
}